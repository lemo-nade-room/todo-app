openapi: 3.1.0
info:
  title: RESTful-API
  version: '1.0'
  summary: フロントエンドをSPAにする場合のサーバーWeb API
  description: ''
servers:
  - url: 'http://localhost:3000'
paths:
  /api/category:
    parameters: []
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: カテゴリ一覧
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
            application/xml:
              schema:
                type: object
                properties: {}
            multipart/form-data:
              schema:
                type: object
                properties:
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
              examples:
                Example 1:
                  value:
                    categories:
                      - id: 1
                        name: フロントエンド
                        slug: front
                        color: 1
      operationId: get-all-category-list
      description: 全てのカテゴリ一覧情報を返します
      parameters: []
    post:
      summary: ''
      operationId: create-category
      responses:
        '201':
          description: Created
      description: カテゴリを1つ新規作成する
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  $ref: '#/components/schemas/CreateCategory'
            examples:
              Example 1:
                value:
                  category:
                    name: バックエンド
                    slug: back
                    color: 2
    put:
      summary: ''
      operationId: update-category
      responses:
        '200':
          description: OK
      description: 1つのカテゴリの内容を変更する
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  $ref: '#/components/schemas/Category'
            examples:
              Example 1:
                value:
                  category:
                    id: 1
                    name: フロントエンド
                    slug: front
                    color: 1
  '/api/category/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    delete:
      summary: ''
      operationId: delete-api-category-id
      responses:
        '200':
          description: OK
      description: 指定したIDのカテゴリを削除する
  /user:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
  '/api/{slug}':
    parameters:
      - schema:
          type: string
        name: slug
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      operationId: get-api-slug
      description: 指定したslugのカテゴリの情報とTodo一覧を返す
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                todo:
                  $ref: '#/components/schemas/CreateTodo'
            examples:
              Example 1:
                value:
                  todo:
                    categoryId: 0
                    title: string
                    '': string
      responses:
        '201':
          description: Created
    post:
      summary: ''
      operationId: post-api-slug
      responses:
        '200':
          description: OK
      description: 新規TODOを作成する
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                '':
                  type: string
    put:
      summary: ''
      operationId: put-api-slug
      responses:
        '200':
          description: OK
      description: idに対応するTODOの内容を変更する
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                todo:
                  $ref: '#/components/schemas/UpdateTodo'
  '/api/todo/{todo-id}':
    parameters:
      - schema:
          type: string
        name: todo-id
        in: path
        required: true
    delete:
      summary: ''
      operationId: delete-api-todo-todoID
      responses:
        '200':
          description: OK
        '':
          description: OK
      description: 指定したIDのTODOを削除する
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      examples:
        - id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
    Category:
      title: CreateCategory
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        slug:
          type: string
        color:
          type: number
          minimum: 0
          maximum: 2
      examples:
        - id: 1
          name: フロントエンド
          slug: front
          color: 1
    CreateCategory:
      title: CreateCategory
      type: object
      properties:
        name:
          type: string
        slug:
          type: string
        color:
          type: number
          minimum: 0
          maximum: 2
      examples:
        - name: バックエンド
          slug: back
          color: 2
    Todo:
      title: Todo
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        body:
          type: string
        date:
          type: string
          format: date-time
      examples:
        - id: 0
          title: string
          body: string
          date: '2019-08-24T14:15:22Z'
    State:
      title: State
      type: object
      properties:
        state:
          type: integer
        todos:
          type: array
          items:
            $ref: '#/components/schemas/Todo'
    CreateTodo:
      title: CreateTodo
      type: object
      properties:
        categoryId:
          type: number
        title:
          type: string
        body:
          type: string
      examples:
        - categoryId: 0
          title: string
          '': string
    UpdateTodo:
      title: UpdateTodo
      type: object
      properties:
        id:
          type: integer
        categoryId:
          type: integer
        title:
          type: string
        body:
          type: string
        state:
          type: number
          minimum: 0
          maximum: 2
      examples:
        - id: 0
          categoryId: 0
          title: string
          body: string
          state: 0
